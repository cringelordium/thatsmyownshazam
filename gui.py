"""
–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏
"""
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import threading
import os
from typing import Optional, Tuple
from music_recognizer import MusicRecognizer

class MusicRecognizerGUI:
    """–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GUI"""
        self.root = tk.Tk()
        self.root.title("MyShazam - –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∏")
        self.root.geometry("600x500")
        self.root.resizable(True, True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        self.recognizer = MusicRecognizer()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.is_recording = False
        self.recording_thread = None
        
        self.setup_ui()
        self.update_database_info()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏–µ
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="MyShazam", font=("Arial", 16, "bold"))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_frame = ttk.LabelFrame(main_frame, text="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", padding="10")
        db_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        db_frame.columnconfigure(1, weight=1)
        
        self.db_info_label = ttk.Label(db_frame, text="–ó–∞–≥—Ä—É–∑–∫–∞...")
        self.db_info_label.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        ttk.Button(db_frame, text="–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é", command=self.add_song_dialog).grid(row=1, column=0, padx=(0, 5))
        ttk.Button(db_frame, text="–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Å–Ω–∏", command=self.show_songs_dialog).grid(row=1, column=1, padx=(5, 0))
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∏
        recognition_frame = ttk.LabelFrame(main_frame, text="–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∏", padding="10")
        recognition_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        recognition_frame.columnconfigure(1, weight=1)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏
        self.record_button = ttk.Button(recognition_frame, text="üé§ –ó–∞–ø–∏—Å–∞—Ç—å –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å", 
                                       command=self.toggle_recording)
        self.record_button.grid(row=0, column=0, columnspan=2, pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        ttk.Button(recognition_frame, text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", 
                  command=self.recognize_from_file).grid(row=1, column=0, columnspan=2, pady=(0, 10))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø–∏—Å–∏
        settings_frame = ttk.Frame(recognition_frame)
        settings_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E))
        settings_frame.columnconfigure(1, weight=1)
        
        ttk.Label(settings_frame, text="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏:").grid(row=0, column=0, sticky=tk.W)
        self.duration_var = tk.StringVar(value="10")
        duration_spinbox = ttk.Spinbox(settings_frame, from_=5, to=30, width=10, 
                                      textvariable=self.duration_var)
        duration_spinbox.grid(row=0, column=1, sticky=tk.W, padx=(10, 0))
        ttk.Label(settings_frame, text="—Å–µ–∫").grid(row=0, column=2, sticky=tk.W, padx=(5, 0))
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        result_frame = ttk.LabelFrame(main_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç", padding="10")
        result_frame.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        result_frame.columnconfigure(0, weight=1)
        result_frame.rowconfigure(0, weight=1)
        main_frame.rowconfigure(3, weight=1)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.result_text = tk.Text(result_frame, height=8, wrap=tk.WORD)
        scrollbar = ttk.Scrollbar(result_frame, orient=tk.VERTICAL, command=self.result_text.yview)
        self.result_text.configure(yscrollcommand=scrollbar.set)
        
        self.result_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_bar = ttk.Label(main_frame, textvariable=self.status_var, relief=tk.SUNKEN)
        status_bar.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(10, 0))
    
    def update_database_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            stats = self.recognizer.get_database_stats()
            self.db_info_label.config(text=f"–ü–µ—Å–µ–Ω: {stats['songs_count']}, –û—Ç–ø–µ—á–∞—Ç–∫–æ–≤: {stats['fingerprints_count']}")
        except Exception as e:
            self.db_info_label.config(text=f"–û—à–∏–±–∫–∞: {str(e)}")
    
    def add_song_dialog(self):
        """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–Ω–∏"""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª",
            filetypes=[
                ("–ê—É–¥–∏–æ —Ñ–∞–π–ª—ã", "*.mp3 *.wav *.flac *.m4a *.ogg"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )
        
        if file_path:
            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Å–Ω–µ
            dialog = tk.Toplevel(self.root)
            dialog.title("–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é")
            dialog.geometry("400x200")
            dialog.resizable(False, False)
            dialog.transient(self.root)
            dialog.grab_set()
            
            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
            dialog.geometry("+%d+%d" % (self.root.winfo_rootx() + 50, self.root.winfo_rooty() + 50))
            
            # –ü–æ–ª—è –≤–≤–æ–¥–∞
            ttk.Label(dialog, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").grid(row=0, column=0, sticky=tk.W, padx=10, pady=5)
            name_var = tk.StringVar(value=os.path.splitext(os.path.basename(file_path))[0])
            name_entry = ttk.Entry(dialog, textvariable=name_var, width=30)
            name_entry.grid(row=0, column=1, padx=10, pady=5)
            
            ttk.Label(dialog, text="–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:").grid(row=1, column=0, sticky=tk.W, padx=10, pady=5)
            artist_var = tk.StringVar()
            artist_entry = ttk.Entry(dialog, textvariable=artist_var, width=30)
            artist_entry.grid(row=1, column=1, padx=10, pady=5)
            
            # –ö–Ω–æ–ø–∫–∏
            button_frame = ttk.Frame(dialog)
            button_frame.grid(row=2, column=0, columnspan=2, pady=20)
            
            def add_song():
                try:
                    name = name_var.get().strip()
                    artist = artist_var.get().strip()
                    
                    if not name:
                        messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏")
                        return
                    
                    self.status_var.set("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Å–Ω–∏...")
                    self.root.update()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Å–Ω—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    def add_song_thread():
                        try:
                            song_id = self.recognizer.add_song_to_database(file_path, name, artist)
                            self.root.after(0, lambda: self.on_song_added(song_id, name, artist))
                        except Exception as e:
                            self.root.after(0, lambda: self.on_song_add_error(str(e)))
                    
                    threading.Thread(target=add_song_thread, daemon=True).start()
                    dialog.destroy()
                    
                except Exception as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏: {str(e)}")
            
            ttk.Button(button_frame, text="–î–æ–±–∞–≤–∏—Ç—å", command=add_song).pack(side=tk.LEFT, padx=5)
            ttk.Button(button_frame, text="–û—Ç–º–µ–Ω–∞", command=dialog.destroy).pack(side=tk.LEFT, padx=5)
    
    def on_song_added(self, song_id: int, name: str, artist: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–Ω–∏"""
        self.status_var.set(f"–ü–µ—Å–Ω—è '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ (ID: {song_id})")
        self.update_database_info()
        self.log_result(f"‚úÖ –ü–µ—Å–Ω—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: {name} - {artist}")
    
    def on_song_add_error(self, error: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–Ω–∏"""
        self.status_var.set("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏")
        self.log_result(f"‚ùå –û—à–∏–±–∫–∞: {error}")
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é: {error}")
    
    def show_songs_dialog(self):
        """–î–∏–∞–ª–æ–≥ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –ø–µ—Å–µ–Ω"""
        try:
            songs = self.recognizer.list_database_songs()
            
            if not songs:
                messagebox.showinfo("–ü–µ—Å–Ω–∏", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
                return
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥
            dialog = tk.Toplevel(self.root)
            dialog.title("–ü–µ—Å–Ω–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            dialog.geometry("600x400")
            dialog.transient(self.root)
            dialog.grab_set()
            
            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
            dialog.geometry("+%d+%d" % (self.root.winfo_rootx() + 50, self.root.winfo_rooty() + 50))
            
            # –°–æ–∑–¥–∞–µ–º Treeview
            tree_frame = ttk.Frame(dialog)
            tree_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            
            tree = ttk.Treeview(tree_frame, columns=("name", "artist", "duration"), show="headings")
            tree.heading("name", text="–ù–∞–∑–≤–∞–Ω–∏–µ")
            tree.heading("artist", text="–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")
            tree.heading("duration", text="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            
            tree.column("name", width=200)
            tree.column("artist", width=150)
            tree.column("duration", width=100)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            for song_id, name, artist, file_path, duration in songs:
                duration_str = f"{duration:.1f}s" if duration else "N/A"
                tree.insert("", tk.END, values=(name, artist or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", duration_str))
            
            # –°–∫—Ä–æ–ª–ª–±–∞—Ä
            scrollbar = ttk.Scrollbar(tree_frame, orient=tk.VERTICAL, command=tree.yview)
            tree.configure(yscrollcommand=scrollbar.set)
            
            tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
            scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            ttk.Button(dialog, text="–ó–∞–∫—Ä—ã—Ç—å", command=dialog.destroy).pack(pady=10)
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω: {str(e)}")
    
    def toggle_recording(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∑–∞–ø–∏—Å–∏"""
        if self.is_recording:
            self.stop_recording()
        else:
            self.start_recording()
    
    def start_recording(self):
        """–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏"""
        try:
            duration = float(self.duration_var.get())
            self.is_recording = True
            self.record_button.config(text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
            self.status_var.set("–ó–∞–ø–∏—Å—å...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.recording_thread = threading.Thread(
                target=self.record_and_recognize, 
                args=(duration,), 
                daemon=True
            )
            self.recording_thread.start()
            
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏")
    
    def stop_recording(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏"""
        self.is_recording = False
        self.record_button.config(text="üé§ –ó–∞–ø–∏—Å–∞—Ç—å –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å")
        self.status_var.set("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏...")
    
    def record_and_recognize(self, duration: float):
        """–ó–∞–ø–∏—Å—å –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞—É–¥–∏–æ
            self.root.after(0, lambda: self.status_var.set(f"–ó–∞–ø–∏—Å—ã–≤–∞–µ–º {duration} —Å–µ–∫—É–Ω–¥..."))
            
            result = self.recognizer.recognize_from_recording(duration)
            
            if not self.is_recording:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.root.after(0, lambda: self.on_recognition_result(result))
            
        except Exception as e:
            self.root.after(0, lambda: self.on_recognition_error(str(e)))
        finally:
            self.root.after(0, self.reset_recording_state)
    
    def recognize_from_file(self):
        """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è",
            filetypes=[
                ("–ê—É–¥–∏–æ —Ñ–∞–π–ª—ã", "*.mp3 *.wav *.flac *.m4a *.ogg"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )
        
        if file_path:
            self.status_var.set("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def recognize_thread():
                try:
                    result = self.recognizer.recognize_from_file(file_path)
                    self.root.after(0, lambda: self.on_recognition_result(result))
                except Exception as e:
                    self.root.after(0, lambda: self.on_recognition_error(str(e)))
            
            threading.Thread(target=recognize_thread, daemon=True).start()
    
    def on_recognition_result(self, result: Optional[Tuple[str, str, float]]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        if result:
            name, artist, similarity = result
            self.status_var.set(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {name} - {artist}")
            self.log_result(f"üéµ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {name} - {artist}")
            self.log_result(f"   –°—Ö–æ–∂–µ—Å—Ç—å: {similarity:.1%}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            try:
                confidence = self.recognizer.get_recognition_confidence(
                    self.recognizer.audio_processor.record_audio(1.0)  # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                )
                self.log_result(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence['overall_confidence']:.1%}")
            except:
                pass
        else:
            self.status_var.set("–ü–µ—Å–Ω—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
            self.log_result("‚ùå –ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    
    def on_recognition_error(self, error: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        self.status_var.set("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
        self.log_result(f"‚ùå –û—à–∏–±–∫–∞: {error}")
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {error}")
    
    def reset_recording_state(self):
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
        self.is_recording = False
        self.record_button.config(text="üé§ –ó–∞–ø–∏—Å–∞—Ç—å –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å")
        if self.status_var.get() == "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏...":
            self.status_var.set("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    def log_result(self, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        self.result_text.insert(tk.END, message + "\n")
        self.result_text.see(tk.END)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root.mainloop()

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    app = MusicRecognizerGUI()
    app.run()
